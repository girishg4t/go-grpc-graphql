// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package launch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaunchServiceClient is the client API for LaunchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaunchServiceClient interface {
	GetLaunch(ctx context.Context, in *GetLaunchRequest, opts ...grpc.CallOption) (*GetLaunchResponse, error)
	GetLaunches(ctx context.Context, in *GetLaunchesRequest, opts ...grpc.CallOption) (*GetLaunchesResponse, error)
}

type launchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaunchServiceClient(cc grpc.ClientConnInterface) LaunchServiceClient {
	return &launchServiceClient{cc}
}

func (c *launchServiceClient) GetLaunch(ctx context.Context, in *GetLaunchRequest, opts ...grpc.CallOption) (*GetLaunchResponse, error) {
	out := new(GetLaunchResponse)
	err := c.cc.Invoke(ctx, "/LaunchService/GetLaunch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *launchServiceClient) GetLaunches(ctx context.Context, in *GetLaunchesRequest, opts ...grpc.CallOption) (*GetLaunchesResponse, error) {
	out := new(GetLaunchesResponse)
	err := c.cc.Invoke(ctx, "/LaunchService/GetLaunches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaunchServiceServer is the server API for LaunchService service.
// All implementations must embed UnimplementedLaunchServiceServer
// for forward compatibility
type LaunchServiceServer interface {
	GetLaunch(context.Context, *GetLaunchRequest) (*GetLaunchResponse, error)
	GetLaunches(context.Context, *GetLaunchesRequest) (*GetLaunchesResponse, error)
	mustEmbedUnimplementedLaunchServiceServer()
}

// UnimplementedLaunchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLaunchServiceServer struct {
}

func (UnimplementedLaunchServiceServer) GetLaunch(context.Context, *GetLaunchRequest) (*GetLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaunch not implemented")
}
func (UnimplementedLaunchServiceServer) GetLaunches(context.Context, *GetLaunchesRequest) (*GetLaunchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaunches not implemented")
}
func (UnimplementedLaunchServiceServer) mustEmbedUnimplementedLaunchServiceServer() {}

// UnsafeLaunchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaunchServiceServer will
// result in compilation errors.
type UnsafeLaunchServiceServer interface {
	mustEmbedUnimplementedLaunchServiceServer()
}

func RegisterLaunchServiceServer(s grpc.ServiceRegistrar, srv LaunchServiceServer) {
	s.RegisterService(&LaunchService_ServiceDesc, srv)
}

func _LaunchService_GetLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaunchService/GetLaunch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetLaunch(ctx, req.(*GetLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaunchService_GetLaunches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLaunchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaunchServiceServer).GetLaunches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LaunchService/GetLaunches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaunchServiceServer).GetLaunches(ctx, req.(*GetLaunchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LaunchService_ServiceDesc is the grpc.ServiceDesc for LaunchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaunchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LaunchService",
	HandlerType: (*LaunchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLaunch",
			Handler:    _LaunchService_GetLaunch_Handler,
		},
		{
			MethodName: "GetLaunches",
			Handler:    _LaunchService_GetLaunches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "launch_grpc/launch.proto",
}

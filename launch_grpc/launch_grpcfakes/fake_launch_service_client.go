// Code generated by counterfeiter. DO NOT EDIT.
package launch_grpcfakes

import (
	"context"
	"sync"

	launch "github.com/girishg4t/grpc-test/launch_grpc"
	"google.golang.org/grpc"
)

type FakeLaunchServiceClient struct {
	GetLaunchStub        func(context.Context, *launch.GetLaunchRequest, ...grpc.CallOption) (*launch.GetLaunchResponse, error)
	getLaunchMutex       sync.RWMutex
	getLaunchArgsForCall []struct {
		arg1 context.Context
		arg2 *launch.GetLaunchRequest
		arg3 []grpc.CallOption
	}
	getLaunchReturns struct {
		result1 *launch.GetLaunchResponse
		result2 error
	}
	getLaunchReturnsOnCall map[int]struct {
		result1 *launch.GetLaunchResponse
		result2 error
	}
	GetLaunchesStub        func(context.Context, *launch.GetLaunchesRequest, ...grpc.CallOption) (*launch.GetLaunchesResponse, error)
	getLaunchesMutex       sync.RWMutex
	getLaunchesArgsForCall []struct {
		arg1 context.Context
		arg2 *launch.GetLaunchesRequest
		arg3 []grpc.CallOption
	}
	getLaunchesReturns struct {
		result1 *launch.GetLaunchesResponse
		result2 error
	}
	getLaunchesReturnsOnCall map[int]struct {
		result1 *launch.GetLaunchesResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLaunchServiceClient) GetLaunch(arg1 context.Context, arg2 *launch.GetLaunchRequest, arg3 ...grpc.CallOption) (*launch.GetLaunchResponse, error) {
	fake.getLaunchMutex.Lock()
	ret, specificReturn := fake.getLaunchReturnsOnCall[len(fake.getLaunchArgsForCall)]
	fake.getLaunchArgsForCall = append(fake.getLaunchArgsForCall, struct {
		arg1 context.Context
		arg2 *launch.GetLaunchRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetLaunchStub
	fakeReturns := fake.getLaunchReturns
	fake.recordInvocation("GetLaunch", []interface{}{arg1, arg2, arg3})
	fake.getLaunchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLaunchServiceClient) GetLaunchCallCount() int {
	fake.getLaunchMutex.RLock()
	defer fake.getLaunchMutex.RUnlock()
	return len(fake.getLaunchArgsForCall)
}

func (fake *FakeLaunchServiceClient) GetLaunchCalls(stub func(context.Context, *launch.GetLaunchRequest, ...grpc.CallOption) (*launch.GetLaunchResponse, error)) {
	fake.getLaunchMutex.Lock()
	defer fake.getLaunchMutex.Unlock()
	fake.GetLaunchStub = stub
}

func (fake *FakeLaunchServiceClient) GetLaunchArgsForCall(i int) (context.Context, *launch.GetLaunchRequest, []grpc.CallOption) {
	fake.getLaunchMutex.RLock()
	defer fake.getLaunchMutex.RUnlock()
	argsForCall := fake.getLaunchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLaunchServiceClient) GetLaunchReturns(result1 *launch.GetLaunchResponse, result2 error) {
	fake.getLaunchMutex.Lock()
	defer fake.getLaunchMutex.Unlock()
	fake.GetLaunchStub = nil
	fake.getLaunchReturns = struct {
		result1 *launch.GetLaunchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeLaunchServiceClient) GetLaunchReturnsOnCall(i int, result1 *launch.GetLaunchResponse, result2 error) {
	fake.getLaunchMutex.Lock()
	defer fake.getLaunchMutex.Unlock()
	fake.GetLaunchStub = nil
	if fake.getLaunchReturnsOnCall == nil {
		fake.getLaunchReturnsOnCall = make(map[int]struct {
			result1 *launch.GetLaunchResponse
			result2 error
		})
	}
	fake.getLaunchReturnsOnCall[i] = struct {
		result1 *launch.GetLaunchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeLaunchServiceClient) GetLaunches(arg1 context.Context, arg2 *launch.GetLaunchesRequest, arg3 ...grpc.CallOption) (*launch.GetLaunchesResponse, error) {
	fake.getLaunchesMutex.Lock()
	ret, specificReturn := fake.getLaunchesReturnsOnCall[len(fake.getLaunchesArgsForCall)]
	fake.getLaunchesArgsForCall = append(fake.getLaunchesArgsForCall, struct {
		arg1 context.Context
		arg2 *launch.GetLaunchesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetLaunchesStub
	fakeReturns := fake.getLaunchesReturns
	fake.recordInvocation("GetLaunches", []interface{}{arg1, arg2, arg3})
	fake.getLaunchesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLaunchServiceClient) GetLaunchesCallCount() int {
	fake.getLaunchesMutex.RLock()
	defer fake.getLaunchesMutex.RUnlock()
	return len(fake.getLaunchesArgsForCall)
}

func (fake *FakeLaunchServiceClient) GetLaunchesCalls(stub func(context.Context, *launch.GetLaunchesRequest, ...grpc.CallOption) (*launch.GetLaunchesResponse, error)) {
	fake.getLaunchesMutex.Lock()
	defer fake.getLaunchesMutex.Unlock()
	fake.GetLaunchesStub = stub
}

func (fake *FakeLaunchServiceClient) GetLaunchesArgsForCall(i int) (context.Context, *launch.GetLaunchesRequest, []grpc.CallOption) {
	fake.getLaunchesMutex.RLock()
	defer fake.getLaunchesMutex.RUnlock()
	argsForCall := fake.getLaunchesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLaunchServiceClient) GetLaunchesReturns(result1 *launch.GetLaunchesResponse, result2 error) {
	fake.getLaunchesMutex.Lock()
	defer fake.getLaunchesMutex.Unlock()
	fake.GetLaunchesStub = nil
	fake.getLaunchesReturns = struct {
		result1 *launch.GetLaunchesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeLaunchServiceClient) GetLaunchesReturnsOnCall(i int, result1 *launch.GetLaunchesResponse, result2 error) {
	fake.getLaunchesMutex.Lock()
	defer fake.getLaunchesMutex.Unlock()
	fake.GetLaunchesStub = nil
	if fake.getLaunchesReturnsOnCall == nil {
		fake.getLaunchesReturnsOnCall = make(map[int]struct {
			result1 *launch.GetLaunchesResponse
			result2 error
		})
	}
	fake.getLaunchesReturnsOnCall[i] = struct {
		result1 *launch.GetLaunchesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeLaunchServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLaunchMutex.RLock()
	defer fake.getLaunchMutex.RUnlock()
	fake.getLaunchesMutex.RLock()
	defer fake.getLaunchesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLaunchServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ launch.LaunchServiceClient = new(FakeLaunchServiceClient)
